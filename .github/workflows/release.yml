name: Release

on:
  push:
    branches: ["master"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings

jobs:
  test-and-lint:
    name: Lint, tests & coverage (>=80%)
    runs-on: ubuntu-latest
    env:
      DJANGO_DEBUG: "1"
      DJANGO_SECRET_KEY: "ci-secret-key"
      DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1"
      DJANGO_CSRF_TRUSTED_ORIGINS: "http://localhost,http://127.0.0.1"
      DJANGO_SECURE_SSL_REDIRECT: "0"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8
      - name: Django migrate (SQLite)
        run: python manage.py migrate --noinput
      - name: Flake8
        run: flake8 .
      - name: Pytest with coverage (fail under 80%)
        run: |
          pytest --maxfail=1 --disable-warnings -q \
            --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=80

  build-and-push:
    name: Build, tag & push Docker image to Docker Hub
    needs: test-and-lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy (skips if no hook)
        env:
          RENDER_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          if [ -z "$RENDER_HOOK" ]; then
            echo "No Render deploy hook configured; skipping."
            exit 0
          fi
          curl -fsSL -X POST "$RENDER_HOOK"
